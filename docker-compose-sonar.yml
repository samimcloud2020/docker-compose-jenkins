version: "3"
services:
  db:
    image: postgres:12-alpine
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - net

  sonarqube:
    image: sonarqube:community
    depends_on:
      - db
    environment:
      - sonar.jdbc.username=sonar
      - sonar.jdbc.url=jdbc:postgresql://db/sonar
      - sonar.jdbc.password=sonar
    ports:
      - 9000:9000
    volumes:
      - sonar_conf:/opt/sonarqube/conf
      - sonar_data:/opt/sonarqube/data
      - sonar_extensions:/opt/sonarqube/extensions
      - sonar_plugins:/opt/sonarqube/lib/bundled-plugins
    networks:
      - net
  docker:
    image: docker:dind   #to execute docker command in jenkins
    container_name: jenkins-docker  
    privileged: true
    command: --storage-driver=overlay2  
    environment:
      - DOCKER_TLS_CERTDIR=/certs
    volumes:
      - "jenkins-docker-certs:/certs/client"
      - "jenkins_data:/var/jenkins_home"
    ports:
      - "2376:2376"
    networks:
      - net    
  jenkins:
    image: myjenkins-blueocean:2.401.1-1
    build:
      context: .
      dockerfile: jenkins-Dockerfile
    privileged: true  
    #user: root  
    ports:
      - 8080:8080
      - 50000:50000
    container_name: jenkins-blueocean
    environment:
      - DOCKER_HOST=tcp://docker:2376
      - DOCKER_CERT_PATH=/certs/client
      - DOCKER_TLS_VERIFY=1   
    volumes:
      - "jenkins_data:/var/jenkins_home"
      - "/var/run/docker.sock:/var/run/docker.sock"  
      - "jenkins-docker-certs:/certs/client:ro"  
    networks:
      - net    
  

networks:
  net:
volumes:                    #named volume must declare.
  sonar_conf:
  sonar_data:
  sonar_extensions:
  sonar_plugins:
  postgres_data:
  jenkins_data:
  jenkins-docker-certs:
